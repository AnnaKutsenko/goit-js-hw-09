{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAY,CAChBC,WAAYC,SAASC,cAAc,uBACnCC,UAAWF,SAASC,cAAc,sBAClCE,YAAaH,SAASC,cAAc,wBACpCG,UAAWJ,SAASC,cAAc,WA8BpC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAAKC,GACvBC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAI,CAAEH,WAAUC,UAGhBG,EAAI,CAAEJ,WAAUC,S,GAGjBA,E,IAtCPT,EAAUM,UAAUU,iBAAiB,SAErC,SAAiBC,GACfA,EAAMC,iBACN,IAAIC,EAAQC,OAAOpB,EAAUC,WAAWoB,OACpCC,EAAOF,OAAOpB,EAAUI,UAAUiB,OAClCE,EAASH,OAAOpB,EAAUK,YAAYgB,OAE1C,GAAGE,EAAS,EACV,IAAK,IAAIC,EAAW,EAAGA,GAAYD,EAAQC,GAAY,EACjDA,EAAW,IACbL,GAASG,GAGXf,EAAciB,EAAUL,GACrBM,MAAK,SAAAC,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MACjBkB,EAAA7B,GAAS8B,OAAOC,QAAQ,uBAAwCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAEvEsB,OAAM,SAAAL,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MAClBkB,EAAA7B,GAAS8B,OAAOI,QAAQ,sBAAqCF,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst selectors = {\n  delayInput: document.querySelector(\"input[name='delay']\"),\n  stepInput: document.querySelector(\"input[name='step']\"),\n  amountInput: document.querySelector(\"input[name='amount']\"),\n  submitBtn: document.querySelector('button'), \n}\n\nselectors.submitBtn.addEventListener('click', onClick);\n\nfunction onClick(event) {\n  event.preventDefault();\n  let delay = Number(selectors.delayInput.value);\n  let step = Number(selectors.stepInput.value);\n  let amount = Number(selectors.amountInput.value);\n\n  if(amount > 0){\n    for (let position = 1; position <= amount; position += 1) {\n      if (position > 1) {\n        delay += step;\n      }\n\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }\n\n  }\n\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((res, rej) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        res({ position, delay })\n        // Fulfill\n      } else {\n        rej({ position, delay })\n        // Reject\n      }\n    }, delay)\n  }) \n\n}"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$selectors","delayInput","document","querySelector","stepInput","amountInput","submitBtn","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","res","rej","setTimeout","Math","random","addEventListener","event","preventDefault","delay1","Number","value","step","amount","position1","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.5299c593.js.map"}